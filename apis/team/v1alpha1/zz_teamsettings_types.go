/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReviewRequestDelegationInitParameters struct {

	// The algorithm to use when assigning pull requests to team members. Supported values are ROUND_ROBIN and LOAD_BALANCE. Default value is ROUND_ROBIN
	// The algorithm to use when assigning pull requests to team members. Supported values are 'ROUND_ROBIN' and 'LOAD_BALANCE'.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The number of team members to assign to a pull request
	// The number of team members to assign to a pull request.
	MemberCount *float64 `json:"memberCount,omitempty" tf:"member_count,omitempty"`

	// whether to notify the entire team when at least one member is also assigned to the pull request
	// whether to notify the entire team when at least one member is also assigned to the pull request.
	Notify *bool `json:"notify,omitempty" tf:"notify,omitempty"`
}

type ReviewRequestDelegationObservation struct {

	// The algorithm to use when assigning pull requests to team members. Supported values are ROUND_ROBIN and LOAD_BALANCE. Default value is ROUND_ROBIN
	// The algorithm to use when assigning pull requests to team members. Supported values are 'ROUND_ROBIN' and 'LOAD_BALANCE'.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The number of team members to assign to a pull request
	// The number of team members to assign to a pull request.
	MemberCount *float64 `json:"memberCount,omitempty" tf:"member_count,omitempty"`

	// whether to notify the entire team when at least one member is also assigned to the pull request
	// whether to notify the entire team when at least one member is also assigned to the pull request.
	Notify *bool `json:"notify,omitempty" tf:"notify,omitempty"`
}

type ReviewRequestDelegationParameters struct {

	// The algorithm to use when assigning pull requests to team members. Supported values are ROUND_ROBIN and LOAD_BALANCE. Default value is ROUND_ROBIN
	// The algorithm to use when assigning pull requests to team members. Supported values are 'ROUND_ROBIN' and 'LOAD_BALANCE'.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The number of team members to assign to a pull request
	// The number of team members to assign to a pull request.
	// +kubebuilder:validation:Optional
	MemberCount *float64 `json:"memberCount,omitempty" tf:"member_count,omitempty"`

	// whether to notify the entire team when at least one member is also assigned to the pull request
	// whether to notify the entire team when at least one member is also assigned to the pull request.
	// +kubebuilder:validation:Optional
	Notify *bool `json:"notify,omitempty" tf:"notify,omitempty"`
}

type TeamSettingsInitParameters struct {

	// The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See GitHub's documentation for more configuration details.
	// The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team.
	ReviewRequestDelegation []ReviewRequestDelegationInitParameters `json:"reviewRequestDelegation,omitempty" tf:"review_request_delegation,omitempty"`

	// The GitHub team id or the GitHub team slug
	// The GitHub team id or the GitHub team slug.
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-github/apis/team/v1alpha1.Team
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

type TeamSettingsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See GitHub's documentation for more configuration details.
	// The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team.
	ReviewRequestDelegation []ReviewRequestDelegationObservation `json:"reviewRequestDelegation,omitempty" tf:"review_request_delegation,omitempty"`

	// The GitHub team id or the GitHub team slug
	// The GitHub team id or the GitHub team slug.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// The slug of the Team within the Organization.
	TeamSlug *string `json:"teamSlug,omitempty" tf:"team_slug,omitempty"`

	// The unique ID of the Team on GitHub. Corresponds to the ID of the 'github_team_settings' resource.
	TeamUID *string `json:"teamUid,omitempty" tf:"team_uid,omitempty"`
}

type TeamSettingsParameters struct {

	// The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See GitHub's documentation for more configuration details.
	// The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team.
	// +kubebuilder:validation:Optional
	ReviewRequestDelegation []ReviewRequestDelegationParameters `json:"reviewRequestDelegation,omitempty" tf:"review_request_delegation,omitempty"`

	// The GitHub team id or the GitHub team slug
	// The GitHub team id or the GitHub team slug.
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-github/apis/team/v1alpha1.Team
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

// TeamSettingsSpec defines the desired state of TeamSettings
type TeamSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamSettingsInitParameters `json:"initProvider,omitempty"`
}

// TeamSettingsStatus defines the observed state of TeamSettings.
type TeamSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TeamSettings is the Schema for the TeamSettingss API. Manages the team settings (in particular the request review delegation settings)
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type TeamSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamSettingsSpec   `json:"spec"`
	Status            TeamSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamSettingsList contains a list of TeamSettingss
type TeamSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamSettings `json:"items"`
}

// Repository type metadata.
var (
	TeamSettings_Kind             = "TeamSettings"
	TeamSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamSettings_Kind}.String()
	TeamSettings_KindAPIVersion   = TeamSettings_Kind + "." + CRDGroupVersion.String()
	TeamSettings_GroupVersionKind = CRDGroupVersion.WithKind(TeamSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamSettings{}, &TeamSettingsList{})
}
