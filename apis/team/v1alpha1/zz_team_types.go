/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamInitParameters struct {

	// Adds a default maintainer to the team. Defaults to false and adds the creating user to the team when true.
	// Adds a default maintainer to the team. Adds the creating user to the team when 'true'.
	CreateDefaultMaintainer *bool `json:"createDefaultMaintainer,omitempty" tf:"create_default_maintainer,omitempty"`

	// A description of the team.
	// A description of the team.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn *string `json:"ldapDn,omitempty" tf:"ldap_dn,omitempty"`

	// The name of the team.
	// The name of the team.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID or slug of the parent team, if this is a nested team.
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamID *string `json:"parentTeamId,omitempty" tf:"parent_team_id,omitempty"`

	// The ID of the created team.
	// The id of the parent team read in Github.
	ParentTeamReadID *string `json:"parentTeamReadId,omitempty" tf:"parent_team_read_id,omitempty"`

	// The slug of the created team, which may or may not differ from name,
	// depending on whether name contains "URL-unsafe" characters.
	// Useful when referencing the team in github_branch_protection.
	// The id of the parent team read in Github.
	ParentTeamReadSlug *string `json:"parentTeamReadSlug,omitempty" tf:"parent_team_read_slug,omitempty"`

	// The level of privacy for the team. Must be one of secret or closed.
	// Defaults to secret.
	// The level of privacy for the team. Must be one of 'secret' or 'closed'.
	Privacy *string `json:"privacy,omitempty" tf:"privacy,omitempty"`
}

type TeamObservation struct {

	// Adds a default maintainer to the team. Defaults to false and adds the creating user to the team when true.
	// Adds a default maintainer to the team. Adds the creating user to the team when 'true'.
	CreateDefaultMaintainer *bool `json:"createDefaultMaintainer,omitempty" tf:"create_default_maintainer,omitempty"`

	// A description of the team.
	// A description of the team.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The ID of the created team.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn *string `json:"ldapDn,omitempty" tf:"ldap_dn,omitempty"`

	MembersCount *float64 `json:"membersCount,omitempty" tf:"members_count,omitempty"`

	// The name of the team.
	// The name of the team.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The Node ID of the created team.
	// The Node ID of the created team.
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	// The ID or slug of the parent team, if this is a nested team.
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamID *string `json:"parentTeamId,omitempty" tf:"parent_team_id,omitempty"`

	// The ID of the created team.
	// The id of the parent team read in Github.
	ParentTeamReadID *string `json:"parentTeamReadId,omitempty" tf:"parent_team_read_id,omitempty"`

	// The slug of the created team, which may or may not differ from name,
	// depending on whether name contains "URL-unsafe" characters.
	// Useful when referencing the team in github_branch_protection.
	// The id of the parent team read in Github.
	ParentTeamReadSlug *string `json:"parentTeamReadSlug,omitempty" tf:"parent_team_read_slug,omitempty"`

	// The level of privacy for the team. Must be one of secret or closed.
	// Defaults to secret.
	// The level of privacy for the team. Must be one of 'secret' or 'closed'.
	Privacy *string `json:"privacy,omitempty" tf:"privacy,omitempty"`

	// The slug of the created team, which may or may not differ from name,
	// depending on whether name contains "URL-unsafe" characters.
	// Useful when referencing the team in github_branch_protection.
	// The slug of the created team.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type TeamParameters struct {

	// Adds a default maintainer to the team. Defaults to false and adds the creating user to the team when true.
	// Adds a default maintainer to the team. Adds the creating user to the team when 'true'.
	// +kubebuilder:validation:Optional
	CreateDefaultMaintainer *bool `json:"createDefaultMaintainer,omitempty" tf:"create_default_maintainer,omitempty"`

	// A description of the team.
	// A description of the team.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	// +kubebuilder:validation:Optional
	LdapDn *string `json:"ldapDn,omitempty" tf:"ldap_dn,omitempty"`

	// The name of the team.
	// The name of the team.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID or slug of the parent team, if this is a nested team.
	// The ID or slug of the parent team, if this is a nested team.
	// +kubebuilder:validation:Optional
	ParentTeamID *string `json:"parentTeamId,omitempty" tf:"parent_team_id,omitempty"`

	// The ID of the created team.
	// The id of the parent team read in Github.
	// +kubebuilder:validation:Optional
	ParentTeamReadID *string `json:"parentTeamReadId,omitempty" tf:"parent_team_read_id,omitempty"`

	// The slug of the created team, which may or may not differ from name,
	// depending on whether name contains "URL-unsafe" characters.
	// Useful when referencing the team in github_branch_protection.
	// The id of the parent team read in Github.
	// +kubebuilder:validation:Optional
	ParentTeamReadSlug *string `json:"parentTeamReadSlug,omitempty" tf:"parent_team_read_slug,omitempty"`

	// The level of privacy for the team. Must be one of secret or closed.
	// Defaults to secret.
	// The level of privacy for the team. Must be one of 'secret' or 'closed'.
	// +kubebuilder:validation:Optional
	Privacy *string `json:"privacy,omitempty" tf:"privacy,omitempty"`
}

// TeamSpec defines the desired state of Team
type TeamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamInitParameters `json:"initProvider,omitempty"`
}

// TeamStatus defines the observed state of Team.
type TeamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Team is the Schema for the Teams API. Provides a GitHub team resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type Team struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TeamSpec   `json:"spec"`
	Status TeamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamList contains a list of Teams
type TeamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Team `json:"items"`
}

// Repository type metadata.
var (
	Team_Kind             = "Team"
	Team_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Team_Kind}.String()
	Team_KindAPIVersion   = Team_Kind + "." + CRDGroupVersion.String()
	Team_GroupVersionKind = CRDGroupVersion.WithKind(Team_Kind)
)

func init() {
	SchemeBuilder.Register(&Team{}, &TeamList{})
}
